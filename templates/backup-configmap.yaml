---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-backup-restore
data:
  backup_restore.py: |
    import http.client
    import sys, os, json
    import boto3
    from botocore.client import ClientError
    from base64 import b64encode

    def get_secrets(env_name, channel_id):
        session = boto3.Session()
        ssm = session.client('ssm')
        ssm_line = "/whatsapp/{}/{}".format(env_name, channel_id)
        admin_password = ssm.get_parameter(Name="{}/admin_password".format(ssm_line), WithDecryption=True)

        secret = admin_password['Parameter']['Value']
        return secret

    def api_handler(event, context):
        """Backup config for coreapp"""
        env_name = os.environ.get('ENV_NAME')
        channel_id = os.environ.get('CHANNEL_ID')
        bucket = os.environ.get('BUCKET')
        restore = os.environ.get('RESTORE', "False")
        admin_password = get_secrets(env_name, channel_id)
        base_host = {"ireland": "wa.jopstaging01.journeyoptimization.com",
                     "cstaging": "wa.becstg.socialanalytics.genesyscloud.com",
                     "prod": "wa.socialanalytics.genesyscloud.com"}
        url = "{}.{}".format(channel_id, base_host[env_name])

        check_bucket(bucket)

        conn = http.client.HTTPSConnection(url)
        user_pass = b64encode(bytes('admin:{}'.format(admin_password), "utf-8")).decode("ascii")
        auth_header = {'Authorization': 'Basic %s' % user_pass}
        conn.request('POST', '/v1/users/login', headers=auth_header)
        response1 = conn.getresponse()
        response_data1 = response1.read()
        data1 = json.loads(response_data1.decode())
        conn.close()

        if response1.status != 200:
            print("Something wrong!")
            print("{} {}\n {}".format(response1.status, response1.reason, data1))
            sys.exit(1)
        token = data1["users"][0]["token"]
        headers = {'Content-type': 'application/json', 'Authorization': 'Bearer %s' % token}
        s3 = boto3.resource('s3')
        try:
            if restore == "True":
                obj = s3.Object(bucket, '{}.txt'.format(channel_id))
                restored_data = obj.get()['Body'].read().decode('utf-8')
                conn = http.client.HTTPSConnection(url)
                payload = {"password": admin_password, "data": restored_data}
                json_data = json.dumps(payload)
                conn.request('POST', '/v1/settings/restore', body=json_data, headers=headers)
                response2 = conn.getresponse()
                response_data2 = response2.read()
                data2 = json.loads(response_data2.decode())
                conn.close()

                if response2.status != 200:
                    print("Something wrong!")
                    print("{} {}\n {}".format(response2.status, response2.reason, data2))
                    sys.exit(1)
                print('Restore done')
            else:
                conn = http.client.HTTPSConnection(url)
                payload = {"password": admin_password}
                json_data = json.dumps(payload)
                conn.request('POST', '/v1/settings/backup', body=json_data, headers=headers)
                response2 = conn.getresponse()
                response_data2 = response2.read()
                data2 = json.loads(response_data2.decode())
                conn.close()

                if response2.status != 200:
                    print("Something wrong!")
                    print("{} {}\n {}".format(response2.status, response2.reason, data2))
                    sys.exit(1)
                backup_data = data2["settings"]["data"]
                s3.Object(bucket, '{}.txt'.format(channel_id)).put(Body=backup_data)
                print('Backup done.')
        except Exception as e:
            print(e)


    def check_bucket(bucket):
        try:
            s3 = boto3.resource('s3')
            s3.meta.client.head_bucket(Bucket=bucket)
            print("Bucket Exists!")
            return True
        except ClientError as e:
            # If a client error is thrown, then check that it was a 404 error.
            # If it was a 404 error, then the bucket does not exist.
            error_code = int(e.response['Error']['Code'])
            if error_code == 403:
                print("Private Bucket. Forbidden Access!")
            elif error_code == 404:
                print("Bucket Does Not Exist!")
            else:
                print(e)
            sys.exit(1)
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ template "fullname" . }}-backup-job
spec:
  schedule: "0 23 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: python-processor
            image: python:3.6
            command: ["python", "/scripts/backup_restore.py"]
            volumeMounts:
              - name: processing-scripts
                mountPath: /scripts
                readOnly: true
          volumes:
          - name: processing-scripts
            configMap:
              name: backup-restore