---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-register-api
data:
  register_api.py: |
    import requests
    import sys, os
    from argparse import ArgumentParser, RawTextHelpFormatter
    import json
    import boto3
    from time import sleep
    from socket import gethostbyname

    class Timer(object):
        def __init__(self, n=5):
            assert n > 0
            self.countdown = n
            self.delay = 1
        def __nonzero__(self):
            if self.countdown <= 0:
                return False
            if self.delay > 1:  
                print(f'Sleeping for {self.delay}...')
                sleep(self.delay)
            self.countdown -= 1
            self.delay *= 2
            return True
        __bool__ = __nonzero__

    def api_handler(url, skipssl):
        """Update admin password, add 2fa, creates metrics user."""
        wa_url = 'https://{}'.format(url)
        d = Timer(7)
        while d:
            try:
                gethostbyname(wa_url)
                print("DNS record are resolving.")
                break
            except:
                print("DNS record aren't resolving yet.")  
                pass
        else:
            print("DNS record didn't resolve. Check your config.")
        k = Timer(7)
        while k:
            request = requests.get(wa_url)
            if request.status_code == 200:
                print("Web app is working!")
                break
            else:
                print("Web app isn't working yet.")
        else:
            print("Web app didn't work. Check your config.")
        
        # Check if password already changed
        test = requests.post(wa_url + '/v1/users/login',
                             auth=('admin', 'secret'), verify=skipssl)
        if test.status_code == 401 and not test.content:
            print("User password already changed.")
            sys.exit(0)
        admin_password, pin, metrics_password, tango_user, tango_pass = get_secrets(env_name, channel_id)
        payload1 = {'new_password': admin_password}
        r1 = requests.post(wa_url + '/v1/users/login', data=payload1,
                           auth=('admin', 'secret'), verify=skipssl)
        if r1.status_code != 200:
            print("Something wrong! Admin pass step")
            print(r1.reason)
            sys.exit(1)
        response = r1.json()
        token = response["users"][0]["token"]
        header = {'Content-type': 'application/json', 'Authorization': 'Bearer ' + token}
        payload2 = {'username': 'metrics', 'password': metrics_password}
        r2 = requests.post(wa_url + '/v1/users', data=json.dumps(payload2),
                           headers=header, verify=skipssl)
        if r2.status_code != 201:
            print("Something wrong! Metrics user step")
            print(r2.json())
            sys.exit(1)
        print("WhatsApp configuration successful!")
    if __name__ == '__main__':
        url = os.environ.get('URL')
        SKIPSSL = os.environ.get('SKIPSSL', "False")
        if SKIPSSL == "True":
            skipssl = True
        else:
            skipssl = False
        api_handler(url, skipssl)
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" . }}-register
  labels:
    app.kubernetes.io/name: {{ template "fullname" . }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: {{ template "fullname" . }}-register
      labels:
        app.kubernetes.io/name: {{ template "fullname" . }}
    spec:
      restartPolicy: {{ .restartPolicy | default "Never" }}
      containers:
      - name: register-api-job
        image: "{{ .Values.scripts.repository }}:{{ .Values.scripts.tag }}"
        env:
        - name: URL
          value: {{ template "fullname" . }}-web
        - name: SKIPSSL
          value: "True"
        command: ["python", "/scripts/register_api.py", "$URL", "$SKIPSSL"]
        volumeMounts:
          - name: processing-scripts
            mountPath: /scripts
            readOnly: true
      volumes:
      - name: processing-scripts
        configMap:
          name: {{ template "fullname" . }}-register-api